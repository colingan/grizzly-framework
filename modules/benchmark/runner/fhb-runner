#!/usr/bin/perl

#
#    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
#    Copyright (c) 2010-2011 Oracle and/or its affiliates. All rights reserved.
#
#    The contents of this file are subject to the terms of either the GNU
#    General Public License Version 2 only ("GPL") or the Common Development
#    and Distribution License("CDDL") (collectively, the "License").  You
#    may not use this file except in compliance with the License.  You can
#    obtain a copy of the License at
#    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
#    or packager/legal/LICENSE.txt.  See the License for the specific
#    language governing permissions and limitations under the License.
#
#    When distributing the software, include this License Header Notice in each
#    file and include the License file at packager/legal/LICENSE.txt.
#
#    GPL Classpath Exception:
#    Oracle designates this particular file as subject to the "Classpath"
#    exception as provided by Oracle in the GPL Version 2 section of the License
#    file that accompanied this code.
#
#    Modifications:
#    If applicable, add the following below the License Header, with the fields
#    enclosed by brackets [] replaced by your own identifying information:
#    "Portions Copyright [year] [name of copyright owner]"
#
#    Contributor(s):
#    If you wish your version of this file to be governed by only the CDDL or
#    only the GPL Version 2, indicate your decision by adding "[Contributor]
#    elects to include this software in this distribution under the [CDDL or GPL
#    Version 2] license."  If you don't indicate a single choice of license, a
#    recipient has the option to distribute your version of this file under
#    either the CDDL, the GPL Version 2 or to extend the choice of license to
#    its licensees as provided above.  However, if you add GPL Version 2 code
#    and therefore, elected the GPL Version 2 license, then the option applies
#    only if the new code is made subject to such option by the copyright
#    holder.
#


use IO::Socket;
use Getopt::Long;
use strict;

# -------------------------------- GLOBALS

my $FABAN_FILE = "faban-kit-022311.tar.gz";
my $FABAN_URL = "http://java.net/projects/faban/downloads/download/faban-kit/$FABAN_FILE";
my $PORT = 5000;
my $HOST = "0.0.0.0";
my $FABAN = "faban/bin/fhb";

# --------------------------------- MAIN EXECUTION

parseCommandLine();
initializeFaban();
listenAndExecute();

# --------------------------------- SUBROUTINES

#
# Listen and execute benchmark client requests.
sub listenAndExecute {
    my $server = new IO::Socket::INET->new(
        LocalAddr => $HOST,
        LocalPort => $PORT, 
        Reuse => 1,
        Listen => 1,
        Proto => 'tcp') || die "Error creating socket: $!";
    print "Faban (fhb) Benchmark Runner accepting connections [$HOST:$PORT]\n";
   
    while (my $client = $server->accept()) {
        while (<$client>) {
            if (!/\S/) {                  # blank line
                next;
            } elsif (/quit|exit/i) {      # close the connection
                last; 
            } else {
                processRequest($client, $_);  # try to process anything else...
            }
        }
    }
}

#
# Benchmark request format:
#     <client threads>|<ramp-up time>|<steady time>|<ramp-down time>|<post data length>|<url>
sub processRequest {
    my ($client,$bminfo) = @_;
    
    my @params = split /\|/, trim($bminfo);
    if (@params != 6) {
        return;
    }
    my $info = "Running new benchmark [@params[5]]:  @params[0] client thread(s); @params[1]/@params[2]/@params[3] ramp up/steady/ramp down" .
               "; @params[4] bytes of post data.\n";
    print $info; 
    $client->write($info . "\n");
    my $command;
    if (@params[4] > 0) {
        open FILE ,"> data.txt" or die $!;
        if (@params[4] <= 3) {
            print FILE "i=a";
        } else { 
            print FILE "i=\@\@faban.getRandomString(" . (@params[4] - 3) . ", " . (@params[4] - 3) . ")\@\@";
        }
        close FILE;
        $command = "$FABAN -r @params[1]/@params[2]/@params[3] -c @params[0] -S -p data.txt @params[5] 2>&1 |"
    } else {
        $command = "$FABAN -r @params[1]/@params[2]/@params[3] -c @params[0] @params[5] 2>&1 |";
    }
    open(BM, $command);
    my @results;
    while (my $line = <BM>) {
        if ($line =~ /exception/i) {
            my $msg = "Exception while processing benchmark:  $line - ABORTING\n";
            $client->write($msg . "\n");
            print $msg;
            last;
        } elsif ($line =~ /^ops|^%|^avg. time|^max time|^90th/) {
            my @p = split /:/, $line;
            push(@results, trim(@p[1]) . " ");
        }   
    }
    print "Benchmark complete\n";
    unlink "data.txt";
    $client->write(".\n");
    $client->write(join(" ", @results) . "\n");
}

#
# Trims a string value.
#
sub trim {
   my $string = shift(@_);
   $string =~ s/^\s+|\s+$//g;
   return $string;
}

#
# Parse command-line arguments
#
sub parseCommandLine {
    my $result = GetOptions('port:i' => \$PORT, 'host:s' => \$HOST);
    if (!$result) {
       print "\nUsage: fhb-runner [--port <network port; defaults to 5000> ]\n" . 
             "                    [--host <network host; defaults to localhost>]\n\n";
       exit 1;
    }
}

#
# This routine will, if the faban directory does not exist within our
# current directory, it will download and extract faban on behalf of the
# caller.
#
sub initializeFaban {
    if (defined $ENV{"FABAN_HOME"}) {
        $FABAN = "$ENV{'FABAN_HOME'}/bin/fhb";
        return;
    }
    if ((-e "faban") && !(-d "faban")) {
        die "faban exists in current directory, but is not a directory itself."
    }
    if (!(-e $FABAN_FILE)) {
        getFaban();
    } 
    if (!(-e "faban")) {
        extractFaban();
    }
}

#
# Downloads faban using wget.
# 
sub getFaban {
    print "\n\nDownloading faban from $FABAN_URL\n\n";
    my @wargs = ("wget", $FABAN_URL);
    system(@wargs) == 0 or die "wget failed: $?";
} 

#
# Extracts faban from the downloaded archive.
#
sub extractFaban() {
    my @zargs = ("tar", "-zxvf", $FABAN_FILE);
    system(@zargs) == 0 or die "extraction failed: $?";
}
