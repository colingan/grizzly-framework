#!/usr/bin/perl

#
#    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
#    Copyright (c) 2010-2012 Oracle and/or its affiliates. All rights reserved.
#
#    The contents of this file are subject to the terms of either the GNU
#    General Public License Version 2 only ("GPL") or the Common Development
#    and Distribution License("CDDL") (collectively, the "License").  You
#    may not use this file except in compliance with the License.  You can
#    obtain a copy of the License at
#    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
#    or packager/legal/LICENSE.txt.  See the License for the specific
#    language governing permissions and limitations under the License.
#
#    When distributing the software, include this License Header Notice in each
#    file and include the License file at packager/legal/LICENSE.txt.
#
#    GPL Classpath Exception:
#    Oracle designates this particular file as subject to the "Classpath"
#    exception as provided by Oracle in the GPL Version 2 section of the License
#    file that accompanied this code.
#
#    Modifications:
#    If applicable, add the following below the License Header, with the fields
#    enclosed by brackets [] replaced by your own identifying information:
#    "Portions Copyright [year] [name of copyright owner]"
#
#    Contributor(s):
#    If you wish your version of this file to be governed by only the CDDL or
#    only the GPL Version 2, indicate your decision by adding "[Contributor]
#    elects to include this software in this distribution under the [CDDL or GPL
#    Version 2] license."  If you don't indicate a single choice of license, a
#    recipient has the option to distribute your version of this file under
#    either the CDDL, the GPL Version 2 or to extend the choice of license to
#    its licensees as provided above.  However, if you add GPL Version 2 code
#    and therefore, elected the GPL Version 2 license, then the option applies
#    only if the new code is made subject to such option by the copyright
#    holder.
#

use IO::Socket;
use Getopt::Long;
use strict;

# -------------------------------- GLOBALS

my $PORT = 5000;
my $HOST = "localhost";
my $BM = '';
my $GITSSH = "ssh://$ENV{'java_net_id'}\@git.java.net/grizzly~git";
my $GITREADONLY = "git://java.net/grizzly~git";
my $G2DOT0 = "2dot0";
my $G2DOT0BRANCH = "2.3.x";
my $BMDIR = $G2DOT0 . "/modules/benchmark/usecase";
my @RUNS;

# --------------------------------- MAIN EXECUTION

parseCommandLine();
initializeGrizzly();
parseBenchmarks();
runBenchmarks();

# --------------------------------- SUBROUTINES

sub initializeGrizzly {
    if ((-e $G2DOT0) && !(-d $G2DOT0)) {
        die "$G2DOT0 exists in current directory, but is not a directory itself."
    }
    checkoutGrizzly();
    buildGrizzly();
}

sub checkoutGrizzly {
   if ((-e "2dot0") && !(-d "2dot0")) {
        die "2dot0 exists in current directory, but is not a directory itself."
   }
   if (-e "2dot0") {
       chdir("2dot0");
       my @args = ("git", "pull", "--rebase", "origin", "$G2DOT0BRANCH");
       system(@args) == 0 or die "git pull/update failed: $?";
       chdir("..");
   } else {
       my $GITPATH = $GITREADONLY;
       if (defined $ENV{"java_net_id"}) {
            $GITPATH = $GITSSH;
       }
       my @args = ("git", "clone", "$GITPATH", "2dot0");
       system(@args) == 0 or die "git clone of Grizzly 2.0 failed: $?";
       my @args = ("git", "checkout", "$G2DOT0BRANCH");
       system(@args) == 0 or die "git checkout failed: $?";
   }  
}

sub buildGrizzly {
    my $pwd = `pwd`;
    chomp $pwd;
    print $pwd;
    chdir($G2DOT0);
    print `pwd`;
    my @args = ("mvn", "-DskipTests=true", "clean", "install");
    system(@args) == 0 or die "Build of Grizzly 2.0 failed: $?";
    chdir($pwd);
}

#
# Trims a string value.
#
sub trim {
    my $string = shift;
    $string =~ s/^\s+//;
    $string =~ s/\s+$//;
    return $string;
}

#
# Parse command-line arguments
#
sub parseCommandLine {
    my $result = GetOptions('port:i' => \$PORT, 'host:s' => \$HOST, 'benchmark=s' => \$BM);
    if (!$result || $BM eq '') {
       print "\nUsage: benchmark [--port <network port of fhb-runner; defaults to 5000> ]\n" .
             "                   [--host <network hostof fhb-runner; defaults to localhost>]\n" .
             "                   --benchmark <file containing benchmark info>\n\n";
       exit 1;
    }
}

sub parseBenchmarks {
    open(BM, $BM);
    while (my $line = <BM>) {
        push(@RUNS, $line);
    } 
    close(BM);
}

sub buildBM {
    my @prog = split /\|/, shift;
    my $pwd = `pwd`;
    chomp $pwd;
    chdir("$BMDIR/@prog[0]");
    print "Building benchmark @prog[0]\n";
    my @args = ("mvn", "-DskipTests=true", "clean", "install");
    system(@args) == 0 or die "Build of Grizzly 2.0 failed: $?";
    chdir($pwd);
    print "\n";
}

sub startBMServer {
    my @prog = split /\|/, shift;
    my $pwd = `pwd`;
    chomp $pwd;
    chdir("$BMDIR/@prog[0]/target");
    my $jar = `ls *.jar`;
    chomp $jar;
    my @vmargs = split /,/, @prog[1];
    my @progargs = split /,/, @prog[2];
    my $command = "java @vmargs -jar $jar @progargs > server.log 2>&1";
    print "Starting server process: ${command}\n";
    my $pid = fork();
    if (defined $pid && $pid == 0) {
        # child processing here
        close(STDOUT);
        exec($command);
        exit(0);
    }
    chdir($pwd);
    return $pid;
}

sub stopBMServer {
    print "Stopping server process...\n";
    my $pid = shift;
    kill 'TERM', $pid;
    kill 'TERM', $pid + 2;
    sleep 10;
}


sub runBenchmark {
    my ($client,$bm,$runcnt,$fhbp) = @_;
    my $pid = startBMServer $bm;
    my @results;
    for (my $i = 0; $i < $runcnt; $i++) {
        my $nb = 0;
        $client->write($fhbp . "\n");
        while (my $line = <$client>) {
            chop $line;
            if ($nb == 0 && $line eq ".") {
                $nb = 1;
                next;
            }
            if ($nb == 1) {
                push(@results, $line);
                last;
            }
        }
    }
    stopBMServer $pid;
    return @results;
}

sub logresults {
    my ($filehandle, $bm, $results) = @_;
    my $date = `date`;
    chomp $date;
    print $filehandle $date . "\n";
    print $filehandle $bm . "\n";
    print $filehandle "-----------------------------------------------------------------------------------\n";
    print $filehandle "|   run   |   ops/sec   |   % Errors   |   avg. time   |   max time   |   90th%   |\n";
    print $filehandle "-----------------------------------------------------------------------------------\n";
    my $len = @$results;
    my $ops = 0.0;
    my $errors = 0.0;
    my $avg = 0.0;
    my $max = 0.0;
    my $nth = 0.0;
    my @ops;
    my @errors;
    my @avg;
    my @max;
    my @nth;
    for (my $i = 0; $i < $len; $i++) {
        my $run = $results->[$i];
        my @r = split /\s+/, $run;
        $ops += @r[0];
        push @ops, @r[0] + 0.0;
        $errors += @r[1];
        push @errors, @r[1] + 0.0;
        $avg += @r[2];
        push @avg, @r[2] + 0.0;
        $max += @r[3];
        push @max, @r[3] + 0.0;
        $nth += @r[4];
        push @nth, @r[4] + 0.0;
        printf $filehandle " %-9s %-13s %-14s %-15s %-14s %-13s\n", $i + 1, @r; 
    } 
    if ($len > 1) {
        $ops /= $len;
        $errors /= $len;
        $avg /= $len;
        $max /= $len;
        $nth /= $len;
        @ops = sort @ops;
        @errors = sort @errors;
        @avg = sort @avg;
        @max = sort @max;
        @nth = sort @nth;
        print $filehandle "\nMean:\n";
        print $filehandle "-------------------------------------------------------------------------\n";
        print $filehandle "|   ops/sec   |   % Errors   |   avg. time   |   max time   |   90th%   |\n";
        print $filehandle "-------------------------------------------------------------------------\n";
        printf $filehandle " %-13.3f %-14.1f %-15.3f %-14.3f %-13.3f\n", $ops, $errors, $avg, $max, $nth; 
        print $filehandle "\nMedian:\n";
        print $filehandle "-------------------------------------------------------------------------\n";
        print $filehandle "|   ops/sec   |   % Errors   |   avg. time   |   max time   |   90th%   |\n";
        print $filehandle "-------------------------------------------------------------------------\n";
        printf $filehandle " %-13.3f %-14.1f %-15.3f %-14.3f %-13.3f\n", median(\@ops), median(\@errors), median(\@avg), median(\@max), median(\@nth);
        print $filehandle "\nStandard Deviation:\n";
        print $filehandle "-------------------------------------------------------------------------\n";
        print $filehandle "|   ops/sec   |   % Errors   |   avg. time   |   max time   |   90th%   |\n";
        print $filehandle "-------------------------------------------------------------------------\n";
        printf $filehandle " %-13.3f %-14.1f %-15.3f %-14.3f %-13.3f\n", stddev($ops,\@ops), stddev($errors,\@errors), stddev($avg, \@avg), stddev($max,\@max), stddev($nth,\@nth);
    }
    print $filehandle "\n\n";
    
}

sub median {
    my $data = shift;
    my $median = @$data % 2 ? $data->[(@$data-1)/2] : ($data->[@$data/2-1]+$data->[@$data/2])/2;
}

sub stddev {
    my ($avg, $data) = @_;
    my $sqtotal = 0;
    foreach my $v (@$data) {
        $sqtotal += ($avg-$v) ** 2;
    }
    my $std = ($sqtotal / @$data) ** 0.5;
}

sub runBenchmarks {
    my $client = new IO::Socket::INET->new(
        PeerAddr => $HOST,
        PeerPort => $PORT, 
        Proto => 'tcp') || die "Error creating socket: $!";
    print "Connection to fhb-runner established: [$HOST:$PORT]\n";
    print "Running benchmarks....\n";
    my $len = @RUNS;
    open(RESULTS, ">benchmark_results.txt") or die "Can't open benchmark_results.txt: $!\n";
    
    for (my $i = 0; $i < $len; $i++) {
        my $run = trim(@RUNS[$i]);
        my @p = split(/\s+/, $run);
        buildBM @p[0];
        print "Starting benchmark $run...\n";
        my @results = runBenchmark($client, @p);
        print "Benchmark '$run', COMPLETE!\n";
        print "Processing results....\n";
        logresults(*RESULTS, $run, \@results);
        print "Processing complete.  Results logged to benchmark_results.txt.\n\n";
    }
}
